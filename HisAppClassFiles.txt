package com.his.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.his.entity.ARUserMaster;
import com.his.model.UserMaster;
import com.his.service.ArService;
import com.his.util.AppConstants;
//http://127.0.0.1:50807/browser/
@RestController
public class ARController {

	@Autowired
	private ArService arService;

	@CrossOrigin
	@PostMapping(value = "/checkEmailId", 
			consumes = { MediaType.APPLICATION_JSON_VALUE,MediaType.APPLICATION_XML_VALUE,	MediaType.TEXT_PLAIN_VALUE }, 
			produces = { MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE, MediaType.TEXT_PLAIN_VALUE })
	public boolean emailExistane(@RequestBody String emailId) {

		System.out.println(emailId);
		boolean status = arService.checkEmailExistance(emailId);
		System.out.println(status);
		return status;
	}
	

	@GetMapping(value="/welcome")
	public String welcome() {
		
		
		return "welcome";
	}

	@CrossOrigin
	@PostMapping(value="/saveCaseWorkerInfo", 
			consumes = { MediaType.APPLICATION_JSON_VALUE,MediaType.APPLICATION_XML_VALUE,	MediaType.TEXT_PLAIN_VALUE }, 
			produces = { MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE, MediaType.TEXT_PLAIN_VALUE })
	@ResponseBody
	public Map<String, Boolean> saveCaseWorkerInfo(@RequestBody UserMaster master  ) {
		System.out.println("ARController.saveCaseWorkerInfo()");
		Map<String, Boolean> resu= new HashMap<>();
		UserMaster resultUserMaster=arService.saveCaseWorkerInfo(master);
		
		if(resultUserMaster.getUserId()!=null) {
			resu.put("status", true);
		}else {
			resu.put("status", false);
		}
		return resu;
	}
	
	@CrossOrigin
	@GetMapping(value="/displayAllCaseWorkerInfo",
			produces = { MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE, MediaType.TEXT_PLAIN_VALUE , MediaType.ALL_VALUE})
	@ResponseBody
	public Map<String, Object> getAllCaseWorkers(@RequestParam(name = "cpn", defaultValue = "1") String pageNo){
		System.out.println("ARController.getAllCaseWorkers()");
		Integer currentPageNo = 1;
		int pageNumber=Integer.parseInt(pageNo);
		List<UserMaster> users = new ArrayList<>();
		Map<String, Object> resultData= new HashMap<>();
		if (null != "1" && !"".equals("1")) {
			currentPageNo = pageNumber;
		}

		Page<ARUserMaster> page = arService.findAllUsers(currentPageNo - 1, AppConstants.PAGE_SIZE);
		int totalPages = page.getTotalPages();
		List<ARUserMaster> entities = page.getContent();

		for (ARUserMaster entity : entities) {
			UserMaster um = new UserMaster();
			BeanUtils.copyProperties(entity, um);
			users.add(um);
		}

		resultData.put("cpn", pageNumber);
		resultData.put("tp", totalPages);
		resultData.put("caseWorkers", users);

		
		return resultData;
		
	}
	
	@CrossOrigin
	@GetMapping(value="/activateCaseWorker")
	public boolean activateCaseWorker(@RequestParam("emaildId") String emailId) {
		boolean statusChanged=false;
		System.out.println("entereed email id "+emailId);
		if(emailId!=null && !emailId.equals(""))
		{
			System.out.println("inside");
			arService.activateCaseWorkerUsingEmailId(emailId);
			statusChanged=true;
		}
		return statusChanged;
	}
	
	@CrossOrigin
	@GetMapping(value="/deActivateCaseWorker")
	public boolean deactivateCaseWorker(@RequestParam("emaildId") String emailId) {
		boolean statusChanged=false;
		System.out.println("entereed email id "+emailId);
		if(emailId!=null && !emailId.equals(""))
		{
			System.out.println("inside");
			arService.deActivateCaseWorkerUsingEmailId(emailId);
			statusChanged=true;
		}
		return statusChanged;
	}

	@CrossOrigin
	@GetMapping(value = "/displayAllCaseWorkers", produces = { MediaType.APPLICATION_JSON_VALUE,
			MediaType.APPLICATION_XML_VALUE, MediaType.TEXT_PLAIN_VALUE, MediaType.ALL_VALUE }, consumes = {
					MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE, MediaType.TEXT_PLAIN_VALUE, MediaType.ALL_VALUE })
	@ResponseBody
	public List<UserMaster> getAllCaseWorkersInfo() {
		System.out.println("ARController.getAllCaseWorkers()");
		List<UserMaster> users = new ArrayList<>();

		List<ARUserMaster> entities = arService.findAllCaseWorkers();
		for (ARUserMaster entity : entities) {
			UserMaster um = new UserMaster();
			BeanUtils.copyProperties(entity, um);
			users.add(um);
		}
		return users;
	}
	
	@CrossOrigin
	@GetMapping(value = "/getCaseWorkerDetailsUsigUserId")
	public UserMaster getCaseWorkersInfoUsingEmailId(@RequestParam("userId") String userId ) {
		System.out.println("user id is"+userId);	
		UserMaster userMaseter= arService.getUserModelUsingUserId(Integer.parseInt(userId));
		return userMaseter;
	}
	
	
	@CrossOrigin
	@PostMapping(value="/updateCaseWorkerInfo", 
			consumes = { MediaType.APPLICATION_JSON_VALUE,MediaType.APPLICATION_XML_VALUE,	MediaType.TEXT_PLAIN_VALUE }, 
			produces = { MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE, MediaType.TEXT_PLAIN_VALUE })
	@ResponseBody
	public boolean updateCaseWorkerInfo(@RequestBody UserMaster master  ) {
		System.out.println("ARController.saveCaseWorkerInfo()");
		UserMaster resultUserMaster=arService.saveCaseWorkerInfo(master);
		boolean status=false;
		if(resultUserMaster.getUserId()!=null) {
			status=true;
		}
		return status;
	}
	
	@CrossOrigin
	@GetMapping(value = "/validateUserCredantials")
	public boolean validateCaseWorkerCredantials(@RequestParam("userName") String userName , @RequestParam("password") String password) {
		boolean validStatus=false;	
		if(userName!=null && password!=null) {
			validStatus= arService.validateUserCredantials(userName, password);
		}
		return validStatus;
	}
	
}
-------------------------------------------------------------

	package com.his.service;
	
	import java.io.BufferedReader;
	import java.io.FileReader;
	import java.util.ArrayList;
	import java.util.List;
	
	import org.springframework.beans.BeanUtils;
	import org.springframework.beans.factory.annotation.Autowired;
	import org.springframework.data.domain.Page;
	import org.springframework.data.domain.PageRequest;
	import org.springframework.data.domain.Pageable;
	import org.springframework.stereotype.Service;
	
	import com.his.entity.ARUserMaster;
	import com.his.model.UserMaster;
	import com.his.repository.ArRepository;
	import com.his.util.AppConstants;
	import com.his.util.EmailService;
	import com.his.util.PasswordService;
	
	@Service
	public class ArService {
	
		@Autowired
		private ArRepository arUserMasterDao;
	
		@Autowired(required = true)
		private EmailService emailService;
	
		public UserMaster saveCaseWorkerInfo(UserMaster um) {
			ARUserMaster entity = new ARUserMaster();
	
			// Defaulting case worker as Active
			um.setActiveSw(AppConstants.STR_Y);
			um.setCreatedBy(AppConstants.ADMIN);
	
			// copying data from model to entity
			BeanUtils.copyProperties(um, entity);
	
			// Encrypting User Password
			String encryptedPwd = PasswordService.encrypt(um.getPwd());
			entity.setPwd(encryptedPwd);
	
			// Calling Repository method
			ARUserMaster savedEntity = arUserMasterDao.save(entity);
	
			// Sending Email with Pwd
			/*if (savedEntity != null) {
				String text;
				try {
					text = getRegEmailBody(um);
					emailService.sendEmail(um.getEmail(), AppConstants.EMAIL_FROM, AppConstants.EMAIL_SUBJECT, text);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}*/
	
			// setting generated pk value to model
			um.setUserId(savedEntity.getUserId());
			return um;
		}
	
		public boolean checkEmailExistance(String emailId) {
			boolean emailFoundStatus = false;
			int count = arUserMasterDao.checkEmailCount(emailId);
			if (count >= 1) {
				emailFoundStatus = true;
			}
			return emailFoundStatus;
		}
	
		private String getRegEmailBody(UserMaster um) throws Exception {
			String fileName = "Registration_Email_Template.txt";
			FileReader fr = new FileReader(fileName);
			BufferedReader br = new BufferedReader(fr);
			String line = br.readLine();
			StringBuilder mailBody = new StringBuilder("");
			while (line != null) {
	
				// Processing mail body content
				if (line.contains("USER_NAME")) {
					line = line.replace("USER_NAME", um.getFirstName() + " " + um.getLastName());
				}
	
				if (line.contains("APP_USER_EMAIL")) {
					line = line.replace("APP_USER_EMAIL", um.getEmail());
				}
	
				if (line.contains("APP_URL")) {
					line = line.replace("APP_URL", "<a href='http://localhost:4200/'>RI HIS</a>");
				}
	
				if (line.contains("APP_USER_PWD")) {
					line = line.replace("APP_USER_PWD", um.getPwd());
				}
	
				// Appending processed line to StringBuilder
				mailBody.append(line);
	
				// reading next line
				line = br.readLine();
			}
	
			fr.close();
			br.close();
	
			// Returning mail body content
			return mailBody.toString();
		}
	
		public Page<ARUserMaster> findAllUsers(int pageNo, int pageSize) {
			Pageable pageble = new PageRequest(pageNo, pageSize);
			List<UserMaster> users = new ArrayList<UserMaster>();
			Page<ARUserMaster> pages = arUserMasterDao.findAll(pageble);
			return pages;
		}
	
		public void activateCaseWorkerUsingEmailId(String emailId) {
			// TODO Auto-generated method stub
			ARUserMaster resultArUserMaster=arUserMasterDao.findByEmailId(emailId);
			resultArUserMaster.setActiveSw(AppConstants.ACTIVATE_CASEWORKER_STATUS);
			System.out.println(resultArUserMaster);
			arUserMasterDao.save(resultArUserMaster);
		}
		
		public void deActivateCaseWorkerUsingEmailId(String emailId) {
			// TODO Auto-generated method stub
			ARUserMaster resultArUserMaster=arUserMasterDao.findByEmailId(emailId);
			System.out.println("--"+resultArUserMaster);
			resultArUserMaster.setActiveSw(AppConstants.DEACTIVATE_CASEWORKER_STATUS);
			System.out.println(resultArUserMaster);
			arUserMasterDao.save(resultArUserMaster);
		}
	
		public List<ARUserMaster> findAllCaseWorkers() {
			// TODO Auto-generated method stub
			return arUserMasterDao.findAll();
		}
	
		public UserMaster getUserModelUsingUserId(int userId) {
			UserMaster userMaster= new UserMaster();
			ARUserMaster arUserMaster=arUserMasterDao.findById(userId).get();
			BeanUtils.copyProperties(arUserMaster, userMaster);
			userMaster.setPwd(PasswordService.decrypt(userMaster.getPwd()));
			return userMaster;
		}
	
		public boolean validateUserCredantials(String userName, String password) {
			
			String encryptedPassWord=PasswordService.encrypt(password);
			ARUserMaster arUserMaster=arUserMasterDao.findByEmailIdAndPassword(userName, encryptedPassWord);
			
			// TODO Auto-generated method stub
			return false;
		}
	
	}


------------------------------------------------
package com.his.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Repository;

import com.his.entity.ARUserMaster;

@Repository
public interface ArRepository extends JpaRepository<ARUserMaster, Integer> {

	@Query("select count(*) from ARUserMaster a where a.email=?1")
	int checkEmailCount(String emailId);

	@Query("FROM ARUserMaster a WHERE a.email=?1")
	ARUserMaster findByEmailId(String emailId);

	@Query("FROM ARUserMaster a WHERE a.email=:userName and a.pwd=encryptedPassWord")
	ARUserMaster findByEmailIdAndPassword(String userName, String encryptedPassWord);

	
}
